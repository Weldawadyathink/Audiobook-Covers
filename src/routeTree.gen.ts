/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RandomRouteImport } from './routes/random'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContributeRouteImport } from './routes/contribute'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as ImagesIdRouteImport } from './routes/images.$id'
import { Route as AdminTestRouteImport } from './routes/admin/test'
import { Route as AdminSimilarRouteImport } from './routes/admin/similar'
import { Route as AdminLogoutRouteImport } from './routes/admin/logout'
import { ServerRoute as CoverBytextServerRouteImport } from './routes/cover.bytext'
import { ServerRoute as ApiLoginServerRouteImport } from './routes/api/login'
import { ServerRoute as ApiHeartbeatServerRouteImport } from './routes/api/heartbeat'

const rootServerRouteImport = createServerRootRoute()

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RandomRoute = RandomRouteImport.update({
  id: '/random',
  path: '/random',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContributeRoute = ContributeRouteImport.update({
  id: '/contribute',
  path: '/contribute',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const ImagesIdRoute = ImagesIdRouteImport.update({
  id: '/images/$id',
  path: '/images/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminTestRoute = AdminTestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSimilarRoute = AdminSimilarRouteImport.update({
  id: '/similar',
  path: '/similar',
  getParentRoute: () => AdminRoute,
} as any)
const AdminLogoutRoute = AdminLogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AdminRoute,
} as any)
const CoverBytextServerRoute = CoverBytextServerRouteImport.update({
  id: '/cover/bytext',
  path: '/cover/bytext',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiLoginServerRoute = ApiLoginServerRouteImport.update({
  id: '/api/login',
  path: '/api/login',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiHeartbeatServerRoute = ApiHeartbeatServerRouteImport.update({
  id: '/api/heartbeat',
  path: '/api/heartbeat',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contribute': typeof ContributeRoute
  '/login': typeof LoginRoute
  '/random': typeof RandomRoute
  '/search': typeof SearchRoute
  '/admin/logout': typeof AdminLogoutRoute
  '/admin/similar': typeof AdminSimilarRoute
  '/admin/test': typeof AdminTestRoute
  '/images/$id': typeof ImagesIdRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contribute': typeof ContributeRoute
  '/login': typeof LoginRoute
  '/random': typeof RandomRoute
  '/search': typeof SearchRoute
  '/admin/logout': typeof AdminLogoutRoute
  '/admin/similar': typeof AdminSimilarRoute
  '/admin/test': typeof AdminTestRoute
  '/images/$id': typeof ImagesIdRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/admin': typeof AdminRouteWithChildren
  '/contribute': typeof ContributeRoute
  '/login': typeof LoginRoute
  '/random': typeof RandomRoute
  '/search': typeof SearchRoute
  '/admin/logout': typeof AdminLogoutRoute
  '/admin/similar': typeof AdminSimilarRoute
  '/admin/test': typeof AdminTestRoute
  '/images/$id': typeof ImagesIdRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/admin'
    | '/contribute'
    | '/login'
    | '/random'
    | '/search'
    | '/admin/logout'
    | '/admin/similar'
    | '/admin/test'
    | '/images/$id'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contribute'
    | '/login'
    | '/random'
    | '/search'
    | '/admin/logout'
    | '/admin/similar'
    | '/admin/test'
    | '/images/$id'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/admin'
    | '/contribute'
    | '/login'
    | '/random'
    | '/search'
    | '/admin/logout'
    | '/admin/similar'
    | '/admin/test'
    | '/images/$id'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AdminRoute: typeof AdminRouteWithChildren
  ContributeRoute: typeof ContributeRoute
  LoginRoute: typeof LoginRoute
  RandomRoute: typeof RandomRoute
  SearchRoute: typeof SearchRoute
  ImagesIdRoute: typeof ImagesIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/heartbeat': typeof ApiHeartbeatServerRoute
  '/api/login': typeof ApiLoginServerRoute
  '/cover/bytext': typeof CoverBytextServerRoute
}
export interface FileServerRoutesByTo {
  '/api/heartbeat': typeof ApiHeartbeatServerRoute
  '/api/login': typeof ApiLoginServerRoute
  '/cover/bytext': typeof CoverBytextServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/heartbeat': typeof ApiHeartbeatServerRoute
  '/api/login': typeof ApiLoginServerRoute
  '/cover/bytext': typeof CoverBytextServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/heartbeat' | '/api/login' | '/cover/bytext'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/heartbeat' | '/api/login' | '/cover/bytext'
  id: '__root__' | '/api/heartbeat' | '/api/login' | '/cover/bytext'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiHeartbeatServerRoute: typeof ApiHeartbeatServerRoute
  ApiLoginServerRoute: typeof ApiLoginServerRoute
  CoverBytextServerRoute: typeof CoverBytextServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/random': {
      id: '/random'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof RandomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contribute': {
      id: '/contribute'
      path: '/contribute'
      fullPath: '/contribute'
      preLoaderRoute: typeof ContributeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/images/$id': {
      id: '/images/$id'
      path: '/images/$id'
      fullPath: '/images/$id'
      preLoaderRoute: typeof ImagesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/test': {
      id: '/admin/test'
      path: '/test'
      fullPath: '/admin/test'
      preLoaderRoute: typeof AdminTestRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/similar': {
      id: '/admin/similar'
      path: '/similar'
      fullPath: '/admin/similar'
      preLoaderRoute: typeof AdminSimilarRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/logout': {
      id: '/admin/logout'
      path: '/logout'
      fullPath: '/admin/logout'
      preLoaderRoute: typeof AdminLogoutRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/cover/bytext': {
      id: '/cover/bytext'
      path: '/cover/bytext'
      fullPath: '/cover/bytext'
      preLoaderRoute: typeof CoverBytextServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/login': {
      id: '/api/login'
      path: '/api/login'
      fullPath: '/api/login'
      preLoaderRoute: typeof ApiLoginServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/heartbeat': {
      id: '/api/heartbeat'
      path: '/api/heartbeat'
      fullPath: '/api/heartbeat'
      preLoaderRoute: typeof ApiHeartbeatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AdminRouteChildren {
  AdminLogoutRoute: typeof AdminLogoutRoute
  AdminSimilarRoute: typeof AdminSimilarRoute
  AdminTestRoute: typeof AdminTestRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminLogoutRoute: AdminLogoutRoute,
  AdminSimilarRoute: AdminSimilarRoute,
  AdminTestRoute: AdminTestRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AdminRoute: AdminRouteWithChildren,
  ContributeRoute: ContributeRoute,
  LoginRoute: LoginRoute,
  RandomRoute: RandomRoute,
  SearchRoute: SearchRoute,
  ImagesIdRoute: ImagesIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiHeartbeatServerRoute: ApiHeartbeatServerRoute,
  ApiLoginServerRoute: ApiLoginServerRoute,
  CoverBytextServerRoute: CoverBytextServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
